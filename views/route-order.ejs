<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Track Delivery - QuickCart</title>

  <!-- Bootstrap & Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css"/>

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>

  <style>
    #map {
      height: 400px;
      width: 100%;
      border-radius: 10px;
      border: 1px solid #ccc;
      margin-bottom: 20px;
    }
  </style>
</head>

<body>
  <%- include('./partials/header') %>
  <%- include('./partials/navbar', { user }) %>

  <div class="container py-5">
    <h3 class="mb-4">Live Delivery Route</h3>
    <div class="text-center my-3">
  <span class="badge bg-info fs-6 me-2" id="eta">Calculating ETA...</span>
  <span class="badge bg-secondary fs-6" id="distance">Calculating Distance...</span>
</div>

    <!-- Map Section -->
    <div id="map"></div>

    <!-- Order & Rider Details -->
    <div class="row g-4">
      <div class="col-md-6">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white">Order Details</div>
          <div class="card-body">
            <p><strong>Product:</strong> <%= product.name %></p>
            <% if(!order.paid){ %>
            <p><strong>Payment status: COD-</strong> ₹<%= order.total %></p>
            <% } else{%>
              <p><strong>Payment status: PREPAID-</strong> ₹<%= order.total %></p>
              <% } %>
            <p><strong>Slot:</strong> <%= order.deliveryDate %> - <%= order.deliverySlot %></p>
            <p><strong>Status:</strong> <span class="badge bg-success"><%= order.status %></span></p>
          </div>
        </div>
      </div>

      <div class="col-md-6">
        <div class="card shadow-sm">
          <div class="card-header bg-secondary text-white">Rider Info</div>
          <div class="card-body">
            <p><strong>Name:</strong> <%= rider.name %></p>
            <p><strong>Phone:</strong> <%= rider.phone %></p>
            <p><strong>Vehicle:</strong> <%= rider.vehicle_type %></p>
            <p><strong>Number Plate:</strong> <%= rider.number_plate %></p>
          </div>
        </div>
      </div>
    </div>
  </div>


 <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  const userLat = <%= userCoords.lat %>;
  const userLng = <%= userCoords.lng %>;
  const riderLat = <%= riderCoords.lat %>;
  const riderLng = <%= riderCoords.lng %>;

  const map = L.map("map").setView([userLat, userLng], 13);

  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "© OpenStreetMap contributors"
  }).addTo(map);

  const riderMarker = L.marker([riderLat, riderLng], { title: "Rider" }).addTo(map).bindPopup("Rider Location");
  const userMarker = L.marker([userLat, userLng], { title: "User" }).addTo(map).bindPopup("Your Delivery Location");

  let currentRoute;

  const drawRoute = async () => {
    const apiKey = "5b3ce3597851110001cf62489081ca3bb7d14114ae443d756525e357";
    const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${riderLng},${riderLat}&end=${userLng},${userLat}`;

    try {
      const res = await fetch(url);
      const data = await res.json();

      const coords = data.features[0].geometry.coordinates;
      const latlngs = coords.map(c => [c[1], c[0]]);

      if (currentRoute) {
        map.removeLayer(currentRoute);
      }

      currentRoute = L.polyline(latlngs, {
        color: "blue",
        weight: 5
      }).addTo(map);

      map.fitBounds(currentRoute.getBounds());

      // ✅ ETA in minutes
      const durationSec = data.features[0].properties.summary.duration;
      const etaMin = Math.ceil(durationSec / 60);
      document.getElementById("eta").innerText = `ETA: ${etaMin} min`;

      // ✅ Distance in km (2 decimal places)
      const distanceMeters = data.features[0].properties.summary.distance;
      const distanceKm = (distanceMeters / 1000).toFixed(2);
      document.getElementById("distance").innerText = `Distance: ${distanceKm} km`;

    } catch (error) {
      console.error("Route fetch failed:", error);
      document.getElementById("eta").innerText = "ETA unavailable";
      document.getElementById("distance").innerText = "Distance unavailable";
    }
  };

  drawRoute();
  setInterval(drawRoute, 60000); // every 1 min
</script>
